//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2023 The Godel Scheduler Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1beta1

import (
	unsafe "unsafe"

	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"

	config "github.com/kubewharf/godel-scheduler/pkg/scheduler/apis/config"
	tracing "github.com/kubewharf/godel-scheduler/pkg/util/tracing"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*GodelSchedulerConfiguration)(nil), (*config.GodelSchedulerConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_GodelSchedulerConfiguration_To_config_GodelSchedulerConfiguration(a.(*GodelSchedulerConfiguration), b.(*config.GodelSchedulerConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*config.GodelSchedulerConfiguration)(nil), (*GodelSchedulerConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_config_GodelSchedulerConfiguration_To_v1beta1_GodelSchedulerConfiguration(a.(*config.GodelSchedulerConfiguration), b.(*GodelSchedulerConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*GodelSchedulerProfile)(nil), (*config.GodelSchedulerProfile)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_GodelSchedulerProfile_To_config_GodelSchedulerProfile(a.(*GodelSchedulerProfile), b.(*config.GodelSchedulerProfile), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*config.GodelSchedulerProfile)(nil), (*GodelSchedulerProfile)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_config_GodelSchedulerProfile_To_v1beta1_GodelSchedulerProfile(a.(*config.GodelSchedulerProfile), b.(*GodelSchedulerProfile), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1beta1_GodelSchedulerConfiguration_To_config_GodelSchedulerConfiguration(in *GodelSchedulerConfiguration, out *config.GodelSchedulerConfiguration, s conversion.Scope) error {
	out.LeaderElection = in.LeaderElection
	out.SchedulerRenewIntervalSeconds = in.SchedulerRenewIntervalSeconds
	out.ClientConnection = in.ClientConnection
	out.HealthzBindAddress = in.HealthzBindAddress
	out.MetricsBindAddress = in.MetricsBindAddress
	out.DebuggingConfiguration = in.DebuggingConfiguration
	out.GodelSchedulerName = in.GodelSchedulerName
	out.SchedulerName = (*string)(unsafe.Pointer(in.SchedulerName))
	out.SubClusterKey = (*string)(unsafe.Pointer(in.SubClusterKey))
	out.Tracer = (*tracing.TracerConfiguration)(unsafe.Pointer(in.Tracer))
	if in.DefaultProfile != nil {
		in, out := &in.DefaultProfile, &out.DefaultProfile
		*out = new(config.GodelSchedulerProfile)
		if err := Convert_v1beta1_GodelSchedulerProfile_To_config_GodelSchedulerProfile(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.DefaultProfile = nil
	}
	if in.SubClusterProfiles != nil {
		in, out := &in.SubClusterProfiles, &out.SubClusterProfiles
		*out = make([]config.GodelSchedulerProfile, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_GodelSchedulerProfile_To_config_GodelSchedulerProfile(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.SubClusterProfiles = nil
	}
	return nil
}

// Convert_v1beta1_GodelSchedulerConfiguration_To_config_GodelSchedulerConfiguration is an autogenerated conversion function.
func Convert_v1beta1_GodelSchedulerConfiguration_To_config_GodelSchedulerConfiguration(in *GodelSchedulerConfiguration, out *config.GodelSchedulerConfiguration, s conversion.Scope) error {
	return autoConvert_v1beta1_GodelSchedulerConfiguration_To_config_GodelSchedulerConfiguration(in, out, s)
}

func autoConvert_config_GodelSchedulerConfiguration_To_v1beta1_GodelSchedulerConfiguration(in *config.GodelSchedulerConfiguration, out *GodelSchedulerConfiguration, s conversion.Scope) error {
	out.LeaderElection = in.LeaderElection
	out.SchedulerRenewIntervalSeconds = in.SchedulerRenewIntervalSeconds
	out.ClientConnection = in.ClientConnection
	out.HealthzBindAddress = in.HealthzBindAddress
	out.MetricsBindAddress = in.MetricsBindAddress
	out.DebuggingConfiguration = in.DebuggingConfiguration
	out.GodelSchedulerName = in.GodelSchedulerName
	out.SchedulerName = (*string)(unsafe.Pointer(in.SchedulerName))
	out.Tracer = (*tracing.TracerConfiguration)(unsafe.Pointer(in.Tracer))
	out.SubClusterKey = (*string)(unsafe.Pointer(in.SubClusterKey))
	if in.DefaultProfile != nil {
		in, out := &in.DefaultProfile, &out.DefaultProfile
		*out = new(GodelSchedulerProfile)
		if err := Convert_config_GodelSchedulerProfile_To_v1beta1_GodelSchedulerProfile(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.DefaultProfile = nil
	}
	if in.SubClusterProfiles != nil {
		in, out := &in.SubClusterProfiles, &out.SubClusterProfiles
		*out = make([]GodelSchedulerProfile, len(*in))
		for i := range *in {
			if err := Convert_config_GodelSchedulerProfile_To_v1beta1_GodelSchedulerProfile(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.SubClusterProfiles = nil
	}
	return nil
}

// Convert_config_GodelSchedulerConfiguration_To_v1beta1_GodelSchedulerConfiguration is an autogenerated conversion function.
func Convert_config_GodelSchedulerConfiguration_To_v1beta1_GodelSchedulerConfiguration(in *config.GodelSchedulerConfiguration, out *GodelSchedulerConfiguration, s conversion.Scope) error {
	return autoConvert_config_GodelSchedulerConfiguration_To_v1beta1_GodelSchedulerConfiguration(in, out, s)
}

func autoConvert_v1beta1_GodelSchedulerProfile_To_config_GodelSchedulerProfile(in *GodelSchedulerProfile, out *config.GodelSchedulerProfile, s conversion.Scope) error {
	out.SubClusterName = in.SubClusterName
	out.BasePluginsForKubelet = (*config.Plugins)(unsafe.Pointer(in.BasePluginsForKubelet))
	out.BasePluginsForNM = (*config.Plugins)(unsafe.Pointer(in.BasePluginsForNM))
	out.PluginConfigs = *(*[]config.PluginConfig)(unsafe.Pointer(&in.PluginConfigs))
	out.PreemptionPluginConfigs = *(*[]config.PluginConfig)(unsafe.Pointer(&in.PreemptionPluginConfigs))
	out.PercentageOfNodesToScore = (*int32)(unsafe.Pointer(in.PercentageOfNodesToScore))
	out.IncreasedPercentageOfNodesToScore = (*int32)(unsafe.Pointer(in.IncreasedPercentageOfNodesToScore))
	out.DisablePreemption = (*bool)(unsafe.Pointer(in.DisablePreemption))
	out.BlockQueue = (*bool)(unsafe.Pointer(in.BlockQueue))
	out.UnitQueueSortPlugin = (*config.Plugin)(unsafe.Pointer(in.UnitQueueSortPlugin))
	out.AttemptImpactFactorOnPriority = (*float64)(unsafe.Pointer(in.AttemptImpactFactorOnPriority))
	out.UnitInitialBackoffSeconds = (*int64)(unsafe.Pointer(in.UnitInitialBackoffSeconds))
	out.UnitMaxBackoffSeconds = (*int64)(unsafe.Pointer(in.UnitMaxBackoffSeconds))
	out.MaxWaitingDeletionDuration = in.MaxWaitingDeletionDuration
	out.CandidatesSelectPolicy = (*string)(unsafe.Pointer(in.CandidatesSelectPolicy))
	out.BetterSelectPolicies = (*config.StringSlice)(unsafe.Pointer(in.BetterSelectPolicies))
	return nil
}

// Convert_v1beta1_GodelSchedulerProfile_To_config_GodelSchedulerProfile is an autogenerated conversion function.
func Convert_v1beta1_GodelSchedulerProfile_To_config_GodelSchedulerProfile(in *GodelSchedulerProfile, out *config.GodelSchedulerProfile, s conversion.Scope) error {
	return autoConvert_v1beta1_GodelSchedulerProfile_To_config_GodelSchedulerProfile(in, out, s)
}

func autoConvert_config_GodelSchedulerProfile_To_v1beta1_GodelSchedulerProfile(in *config.GodelSchedulerProfile, out *GodelSchedulerProfile, s conversion.Scope) error {
	out.SubClusterName = in.SubClusterName
	out.BasePluginsForKubelet = (*config.Plugins)(unsafe.Pointer(in.BasePluginsForKubelet))
	out.BasePluginsForNM = (*config.Plugins)(unsafe.Pointer(in.BasePluginsForNM))
	out.PluginConfigs = *(*[]config.PluginConfig)(unsafe.Pointer(&in.PluginConfigs))
	out.PreemptionPluginConfigs = *(*[]config.PluginConfig)(unsafe.Pointer(&in.PreemptionPluginConfigs))
	out.PercentageOfNodesToScore = (*int32)(unsafe.Pointer(in.PercentageOfNodesToScore))
	out.IncreasedPercentageOfNodesToScore = (*int32)(unsafe.Pointer(in.IncreasedPercentageOfNodesToScore))
	out.DisablePreemption = (*bool)(unsafe.Pointer(in.DisablePreemption))
	out.CandidatesSelectPolicy = (*string)(unsafe.Pointer(in.CandidatesSelectPolicy))
	out.BetterSelectPolicies = (*config.StringSlice)(unsafe.Pointer(in.BetterSelectPolicies))
	out.MaxWaitingDeletionDuration = in.MaxWaitingDeletionDuration
	out.BlockQueue = (*bool)(unsafe.Pointer(in.BlockQueue))
	out.UnitQueueSortPlugin = (*config.Plugin)(unsafe.Pointer(in.UnitQueueSortPlugin))
	out.AttemptImpactFactorOnPriority = (*float64)(unsafe.Pointer(in.AttemptImpactFactorOnPriority))
	out.UnitInitialBackoffSeconds = (*int64)(unsafe.Pointer(in.UnitInitialBackoffSeconds))
	out.UnitMaxBackoffSeconds = (*int64)(unsafe.Pointer(in.UnitMaxBackoffSeconds))
	return nil
}

// Convert_config_GodelSchedulerProfile_To_v1beta1_GodelSchedulerProfile is an autogenerated conversion function.
func Convert_config_GodelSchedulerProfile_To_v1beta1_GodelSchedulerProfile(in *config.GodelSchedulerProfile, out *GodelSchedulerProfile, s conversion.Scope) error {
	return autoConvert_config_GodelSchedulerProfile_To_v1beta1_GodelSchedulerProfile(in, out, s)
}
